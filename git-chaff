#!/bin/bash
set -o nounset  # the
set -o errexit  # worst
set -o pipefail # language

usage() {
if [ $# -eq 0 ]; then
  cat <<- EOF
	usage: git chaff <days-back> <days-forward>
	
	Generates fake history for some number of days forward and backward
	from current date.
	EOF
  exit 1
fi
}

rand()
{
  # $RANDOM is too biased for random walks :)
  #
  # Drop-in replacement courtesy of Julien Palard:
  # http://dev-tricks.net/bashism-how-to-generate-random-number-without-random
  echo $(($(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1) % 32768))
}

bound() {
  local val=$1
  local min=$2
  local max=$3

  if [[ $val -gt $max ]]
  then 
    val=$max 
  fi
  if [[ $val -lt $min ]] 
  then 
    val=$min 
  fi
  echo $val
}

create_commits() {
  local day=$1
  local count=$2

  while [ $count -gt 0 ]; do
    # using bash-rand for time because it's Fast(tm)
    DH=$(($RANDOM%24))
    DM=$(($RANDOM%60)) # fun fact: hexagecimal is a real word, not a typo!
    DATE=$(date --date="+$day day +$DH hour +$DM minute" +%xT%H:%M)

    export GIT_AUTHOR_DATE=$DATE
    export GIT_COMMITTER_DATE=$DATE
    git commit --allow-empty --allow-empty-message -m '' > /dev/null

    let count-=1
  done
}

main() {
  usage "$@"

  local days_back=$1
  local days_forward=$2

  echo "Generating..."

  # tries to roughly emulate ekmett's commit patterns (if only I was that prolific)
  readonly WALK_MAX_STEP=30 # must be even
  readonly WALK_MAX=26
  readonly WALK_MIN=-8

  readonly BURST_CHANCE=7 # how many days between bursts of productivity
  readonly BURST_MAX=100

  WALK=0
  for DAY in $(seq -$days_back $days_forward); do
    # bounded random walk, with negative values indicating no activity
    WALK=$(($WALK+($(rand)%$WALK_MAX_STEP)-($WALK_MAX_STEP/2)))
    WALK=$(bound $WALK $WALK_MIN $WALK_MAX)
    COMMITS=$(bound $WALK 0 $WALK_MAX)

    # there's also rare spikes of activity beyond the normal walk
    IS_BURST=$(($(rand)%$BURST_CHANCE))
    if [[ $IS_BURST -eq 0 ]] 
    then 
      COMMITS=$(($COMMITS+($(rand)%$BURST_MAX))) 
    fi

    create_commits $DAY $COMMITS || true
  done

  echo "Done!"
}

main "$@"
